tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(region_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("left","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(region_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
ddply(study_site, "Region", "Month", summarise, juvprop = mean(`Perc-JV`, na.rm=T),
flocksize = mean(Total_flock, na.rm=T))
ddply(study_site, c("Region", "Month"), summarise, juvprop = mean(`Perc-JV`, na.rm=T),
flocksize = mean(Total_flock, na.rm=T))
month_data = ddply(study_site, c("Region", "Month"), summarise, juvprop = mean(`Perc-JV`, na.rm=T),
flocksize = mean(Total_flock, na.rm=T))
month_data = merge(month_data, regions, by.x = "Region",
by.y = "V2")
month_data = month_data[month_data$lon<8,]
coordinates(month_data) = ~lon+lat
#'use tmap
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(region_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(free.scales=FALSE)+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_layout(frame = T,
panel.labels= month_data$Month,
panel.label.bg.color="white",
attr.outside=T)
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(region_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE)+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(month_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE)+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(month_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE)
#'use tmap
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(month_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE, ncol = 3)
#'use tmap
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(month_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE, ncol = 3)
#'use tmap
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(month_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE, ncol = 3)
#'use tmap
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(month_data)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("regions", size = 0.8, just = c("right","bottom"))+
tm_facets(by = "Month", free.scales=FALSE, ncol = 3)
dim(study_site[is.na(study_site$"Perc-JVL") & is.na(study_site$N_Adult) & is.na(study_site$N_Juvenile),])[1]
#'use tmap
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(region_data)+
tm_symbols(scale = 4,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("Region", size = 0.8, just = c("right","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
rivers = readOGR("vector/ne_10m_rivers_lake_centerlines.shp")
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(rivers)+
tm_lines(col = "royalblue")+
tm_shape(region_data)+
tm_symbols(scale = 4,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("Region", size = 0.8, just = c("right","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
lakes = readOGR("vector/ne_10m_lakes.shp")
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(rivers)+
tm_lines(col = "royalblue")+
tm_shape(lakes)+
tm_polygons(col = "royalblue")+
tm_shape(region_data)+
tm_symbols(scale = 4,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T,
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("Region", size = 0.8, just = c("right","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(rivers)+
tm_lines(col = "royalblue")+
tm_shape(lakes)+
tm_polygons(col = "royalblue")+
tm_shape(region_data)+
tm_symbols(scale = 4,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
legend.col.show = T, style = "cont",
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("Region", size = 0.8, just = c("right","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(rivers)+
tm_lines(col = "royalblue")+
tm_shape(lakes)+
tm_polygons(col = "royalblue")+
tm_shape(region_data)+
tm_symbols(scale = 4,border.lwd = 0.1, size = "flocksize",
col = "juvprop", legend.size.show= T,
palette = "YlOrRd",
legend.col.show = T, style = "cont",
title.size = "Mean flock size",
title.col = "Mean juvenile %")+
tm_text("Region", size = 0.8, just = c("right","bottom"))+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
iregions_codes2
regions_codes2
regions
require("knitr")
opts_knit$set(root.dir = "~/git/thesis/")
#'load knitr
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
tufte::tufte_handout()
#'library loads
library(RColorBrewer)
goose_cols = colorRampPalette(brewer.pal(9, "YlOrRd"))
#'load libs
library(readxl)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
#'all unqiue places in the netherlands or nrw after than 2000, which also have family data
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country == "NL"|lt_geese$Country=="NRW" & lt_geese$Breeding_year > 2000,]
#'then sum family data
study_site = cbind(study_site, fams = apply(study_site[,c(19:28)], 1, function(x){sum(x, na.rm = T)}))
#'now retain only families > 0
family_sites = study_site[study_site$fams>0,]
#'1246 sites are retained
#'count unique non na places
length(unique(family_sites$Site_name))
#'how many NAs?
sum(is.na(as.factor(family_sites$Site_name)))
#'get the place names
places = unique(family_sites$Site_name)
#'geocode places
#place_codes = geocode(places)
#'bind places and codes
#places = cbind(places, place_codes)
place_codes = read.csv("places.csv")
place_codes = place_codes[,c(2,3)]
places = cbind(places, place_codes)
#'merge places and fmaily sites by site name
family_sites = merge(family_sites, places, by.x = "Site_name", by.y = "places")
#'load tmap
library(tmap)
library(maps)
#'first remove all geocodes for NAs, and weird coordinates
family_sites = family_sites[!is.na(family_sites$lat) & !is.na(family_sites$lon),]
#'weird coordinates, so anything negative
family_sites = family_sites[family_sites$lat>0 & family_sites$lon>0 & family_sites$lon<8 & family_sites$lat<54,]
#'round mean-fam
#family_sites$Mean_Fam = round(family_sites$Mean_Fam,0)
#'load some polygons
library(sp);library(maptools); library(rgdal); library(raster)
nl = readOGR("vector/ne_10m_admin_0_boundary_lines_land.shp")
coast = readOGR("vector/ne_10m_land.shp")
lakes = readOGR("vector/ne_10m_lakes.shp")
rivers = readOGR("vector/ne_10m_rivers_lake_centerlines.shp")
#'convert to spdf
coordinates(family_sites)=~lon+lat
crs(family_sites) = crs(nl)
#'check for NAs
sum(is.na(family_sites$`Perc-JV`))
#'make a new column for juvenile percentage
#'juv perc is juvs/total if total present, or juvs/adults if total = NA
family_sites$propjuv = ifelse(is.na(family_sites$Total_flock),
(family_sites$N_Juvenile/family_sites$N_Adult)*100,                             (family_sites$N_Juvenile/family_sites$Total_flock)*100)
#use tmap to map families
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(family_sites)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "Total_flock",
col = "Mean_Fam",
palette = goose_cols(5),
style = "pretty", jitter = 1.5,
legend.hist = T, legend.size.show= T,
legend.col.show = T, title.size = "Flock size",
title.col = "Mean family size")+
tm_shape(family_sites)+
tm_symbols(shape = 4, scale = 1, size = 0.1, border.lwd = 0.1,  col = "royalblue")+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
#use tmap to map families
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(family_sites)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "Total_flock",
col = "propjuv",
style = "pretty", jitter = 1.5,
palette = goose_cols(5),
legend.hist = T, legend.size.show= T,
legend.col.show = T,
title.size = "Flock size", title.col = "Juvenile %")+
tm_shape(family_sites)+
tm_symbols(shape = 4, scale = 1, size = 0.1, border.lwd = 0.1,  col = "royalblue")+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
#'how many records in the study site with juv percentages
sum(!is.na(study_site$`Perc-JV`))
#'how many records in the study site with region not NA
sum(!is.na(study_site$Region))
#'how many unique regions
sum(!is.na(unique(as.factor(study_site$Region))))
kable((as.matrix(table(study_site$Region, study_site$Country))))
#'unique regions
unique(as.character(as.factor(study_site$Region)))
#'create a vector of regions from guesswork
regions = c("Brabant","Drenthe","Duisburg", "Flevoland","Friesland",
"Gelderland", "Groningen", "Ijssel","Kleve",
"LB", "Leer",  "Limburg", "North Brabant",
"North Holland", "Netherlands", "Overijssel",
"Nijmegen","Utrecht", "Wesel","Wageningen","Rotterdam","Zeeland")
#'cbind with region abbreviations
regions = cbind(regions, unique(study_site$Region))
regions_codes2 = read.csv("regions_codes.csv")[,c(2,3)]
regions = cbind(regions, regions_codes2)
regions
unique(study_site$Region)
unique(as.factor(study_site$Region))
regions = cbind(regions, unique(as.factor(study_site$Region)))
regions
regions_codes2
regions
unique(study_site$Region)
order(unique(study_site$Region))
order(unique(as.factor(study_site$Region)))
sort(unique(study_site$Region))
regions = c("Brabant","Drenthe","Duisburg", "Flevoland","Friesland",
"Gelderland", "Groningen", "Ijssel","Kleve",
"LB", "Leer",  "Limburg", "North Brabant",
"North Holland", "Netherlands", "Overijssel",
"Nijmegen","Utrecht", "Wesel","Wageningen","Rotterdam","Zeeland")
regions = cbind(regions, sort(unique(study_site$Region)))
regions
require("knitr")
opts_knit$set(root.dir = "~/git/thesis/")
#'load knitr
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
tufte::tufte_handout()
#'library loads
library(RColorBrewer)
goose_cols = colorRampPalette(brewer.pal(9, "YlOrRd"))
#'load libs
library(readxl)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
#'all unqiue places in the netherlands or nrw after than 2000, which also have family data
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country == "NL"|lt_geese$Country=="NRW" & lt_geese$Breeding_year > 2000,]
#'then sum family data
study_site = cbind(study_site, fams = apply(study_site[,c(19:28)], 1, function(x){sum(x, na.rm = T)}))
#'now retain only families > 0
family_sites = study_site[study_site$fams>0,]
#'1246 sites are retained
#'count unique non na places
length(unique(family_sites$Site_name))
#'how many NAs?
sum(is.na(as.factor(family_sites$Site_name)))
#'get the place names
places = unique(family_sites$Site_name)
#'geocode places
#place_codes = geocode(places)
#'bind places and codes
#places = cbind(places, place_codes)
place_codes = read.csv("places.csv")
place_codes = place_codes[,c(2,3)]
places = cbind(places, place_codes)
#'merge places and fmaily sites by site name
family_sites = merge(family_sites, places, by.x = "Site_name", by.y = "places")
#'load tmap
library(tmap)
library(maps)
#'first remove all geocodes for NAs, and weird coordinates
family_sites = family_sites[!is.na(family_sites$lat) & !is.na(family_sites$lon),]
#'weird coordinates, so anything negative
family_sites = family_sites[family_sites$lat>0 & family_sites$lon>0 & family_sites$lon<8 & family_sites$lat<54,]
#'round mean-fam
#family_sites$Mean_Fam = round(family_sites$Mean_Fam,0)
#'load some polygons
library(sp);library(maptools); library(rgdal); library(raster)
nl = readOGR("vector/ne_10m_admin_0_boundary_lines_land.shp")
coast = readOGR("vector/ne_10m_land.shp")
lakes = readOGR("vector/ne_10m_lakes.shp")
rivers = readOGR("vector/ne_10m_rivers_lake_centerlines.shp")
#'convert to spdf
coordinates(family_sites)=~lon+lat
crs(family_sites) = crs(nl)
#'check for NAs
sum(is.na(family_sites$`Perc-JV`))
#'make a new column for juvenile percentage
#'juv perc is juvs/total if total present, or juvs/adults if total = NA
family_sites$propjuv = ifelse(is.na(family_sites$Total_flock),
(family_sites$N_Juvenile/family_sites$N_Adult)*100,                             (family_sites$N_Juvenile/family_sites$Total_flock)*100)
#use tmap to map families
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(family_sites)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "Total_flock",
col = "Mean_Fam",
palette = goose_cols(5),
style = "pretty", jitter = 1.5,
legend.hist = T, legend.size.show= T,
legend.col.show = T, title.size = "Flock size",
title.col = "Mean family size")+
tm_shape(family_sites)+
tm_symbols(shape = 4, scale = 1, size = 0.1, border.lwd = 0.1,  col = "royalblue")+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
#use tmap to map families
tm_shape(nl, bbox = extent(family_sites)+0.5)+
tm_lines()+
tm_shape(coast)+
tm_polygons(col = "grey80",alpha = 0.1)+
tm_shape(family_sites)+
tm_symbols(scale = 3,border.lwd = 0.1, size = "Total_flock",
col = "propjuv",
style = "pretty", jitter = 1.5,
palette = goose_cols(5),
legend.hist = T, legend.size.show= T,
legend.col.show = T,
title.size = "Flock size", title.col = "Juvenile %")+
tm_shape(family_sites)+
tm_symbols(shape = 4, scale = 1, size = 0.1, border.lwd = 0.1,  col = "royalblue")+
tm_scale_bar(position = c("left","bottom"), breaks=c(0,10,20))+
tm_format_NLD()+
tm_layout(frame = T)
#'how many records in the study site with juv percentages
sum(!is.na(study_site$`Perc-JV`))
#'how many records in the study site with region not NA
sum(!is.na(study_site$Region))
#'how many unique regions
sum(!is.na(unique(as.factor(study_site$Region))))
kable((as.matrix(table(study_site$Region, study_site$Country))))
#'unique regions
unique(as.character(as.factor(study_site$Region)))
#'create a vector of regions from guesswork
regions = c("Brabant","Drenthe","Duisburg", "Flevoland","Friesland",
"Gelderland", "Groningen", "Ijssel","Kleve",
"LB", "Leer",  "Limburg", "North Brabant",
"North Holland", "Netherlands", "Overijssel",
"Nijmegen","Utrecht", "Wesel","Wageningen","Rotterdam","Zeeland")
#'cbind with region abbreviations
regions = cbind(regions, sort(unique(study_site$Region)))
regions
regions_codes2 = read.csv("regions_codes.csv")[,c(2,3)]
regions_codes2
regions = cbind(regions, regions_codes2)
regions
study_site = merge(study_site, regions, by.x = "Region", by.y = "V2")
head(study_site, 1)
study_site[sample(nrow(study_site), 3), ]
