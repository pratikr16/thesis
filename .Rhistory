theme_bw()
library(ggplot2);library(reshape)
goose_time2 = melt(goose_time, id.vars = c("time","Region"))
#'load knitr
library(knitr)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/")
#'load libs
library(readxl)
library(RColorBrewer)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
#'all records in the netherlands or nrw after than 2000
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country == "NL"|lt_geese$Country=="NRW",]
study_site = study_site[study_site$Breeding_year >= 2001,]
#'fix missing days
study_site$Day = ifelse(is.na(study_site$Day),
15, study_site$Day)
#'use a time column of the posixct class
study_site$time = as.POSIXct(paste(study_site$Year,
study_site$Month,study_site$Day),
format="%Y %m %d")
#'fix flock size
study_site$Total_flock = ifelse(is.na(study_site$Total_flock),
ifelse(is.na(study_site$N_sampled),
study_site$N_Adult+study_site$N_Juvenile,
study_site$N_sampled),
study_site$Total_flock)
#'fix juvenile percentage
study_site$`Perc-JV` = ifelse(is.na(study_site$`Perc-JV`),
study_site$N_Juvenile*100/study_site$Total_flock,
study_site$`Perc-JV`)
#'check for NAs
apply(study_site, 2, function(x){sum(is.na(x))})
#export to csv
study_site = study_site[study_site$time < "2012-05-01",]
write.csv(study_site, "clean_goose_data.csv")
#'create limited data frame
goose_time = study_site[,c("Region","Breeding_year","Total_flock","Perc-JV","time")]
#'remove years above 2012
goose_time = goose_time[goose_time$time < "2012-05-01",]
summary(goose_time[is.na(goose_time$Region),])
#'complete cases for time
goose_time = goose_time[complete.cases(goose_time),]
#'where are the NAs?
apply(goose_time, 2, function(x){sum(is.na(x))})
library(ggplot2);library(reshape)
goose_time2 = melt(goose_time, id.vars = c("time","Region"))
goose_time2 = melt(goose_time, id.vars = c("time","Region"))
goose_time2 = melt(goose_time)
ggplot(data = goose_time,
aes(x=Region, y=time)
geom_tile()+
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
#scale_fill_gradientn(colours = goose_cols(20))+
labs(list(fill = "Records"))+
theme_bw()
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
scale_fill_gradientn(palette = "Reds")+
labs(list(fill = "Records"))+
theme_bw()
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
labs(list(fill = "Records"))+
theme_bw()
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
theme_dark()
ggplot(data = goose_time,
aes(x=Region, y=time), fill = "coral")+
geom_tile()+
theme_dark()
ggplot(data = goose_time,
aes(x=Region, y=time), col = "coral")+
geom_tile()+
theme_dark()
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
theme_bw()
library(ggplot2);library(reshape)
goose_time2 = melt(goose_time)
library(ggplot2)
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
theme_bw()
```{r tilemap_space_time, fig.cap= "Sampling times in each region. Sampling is not even and is very sparse in some provinces.", fig.width=7, fig.height=3}
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
theme_bw()
goose_ts = aggregate(goose_time, list(goose_time$time), mean)
head(goose_ts)
goose_ts = aggregate(goose_time,
list(goose_time$time, goose_time$Region), mean)
head(goose_ts)
goose_ts = aggregate(goose_time,
list(goose_time$time), mean)
head(goose_ts)
ncol(goose_ts)
goose_ts = zoo(goose_ts[,c(3:5)], order.by = goose_ts$time)
plot(goose_ts)
plot(goose_ts[,c(2,3)])
autplot(goose_ts, geom = "path")
autoplot(goose_ts, geom = "path")
autoplot(goose_ts[,c(2,3)], geom = "path")
autoplot(goose_ts[,c(2,3)], geom = "path",
scales = "free_y")
x.Date <- as.Date(paste(2003, 02, c(1, 3, 7, 9, 14), sep = "-"))
x <- zoo(rnorm(5), x.Date)
xlow <- x - runif(5)
xhigh <- x + runif(5)
z <- cbind(x, xlow, xhigh)
autoplot(x)
ggplot(aes(x = Index, y = Value), data = fortify(x, melt = TRUE)) +
geom_line() + xlab("Index") + ylab("x")
ggplot(aes(x = Index, y = x, ymin = xlow, ymax = xhigh), data = fortify(x)) +
geom_ribbon(fill = "darkgray") + geom_line()
ggplot(aes(x = Index, y = Value, group = Series, colour = Series, linetype = Series),
data = fortify(z, melt = TRUE)) + geom_line() + xlab("Index") + ylab("")
ggplot(aes(x = Index, y = x, ymin = xlow, ymax = xhigh), data = fortify(goose_ts)) +
geom_ribbon(fill = "darkgray") + geom_line()
ggplot(aes(x = Index, y = x, ymin = xlow, ymax = xhigh), data = fortify(goose_ts)) +
#geom_ribbon(fill = "darkgray") +
geom_line()
ggplot(aes(x = Index, y = goose_ts), data = fortify(goose_ts)) +
#geom_ribbon(fill = "darkgray") +
geom_line()
ggplot(data = fortify(goose_ts))+
geom_line()
str(goose_ts)
str(fortify(goose_ts))
ggplot(data = melt(fortify(goose_ts), id.vars = "Index"))+
geom_path(aes(x = Index, y = value))+
facet_wrap(~Variable)
ggplot(data = melt(fortify(goose_ts), id.vars = "Index"))+
geom_path(aes(x = Index, y = value))+
facet_wrap(~variable)
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_path(aes(x = Index, y = value))+
facet_wrap(~variable, ncol = 1)
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_path(aes(x = Index, y = value))+
facet_wrap(~variable, ncol = 1, scales = "free")
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value))+
facet_wrap(~variable, ncol = 1, scales = "free")
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value),
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red"))+
facet_wrap(~variable, ncol = 1, scales = "free")+
theme_bw()
library(lubridate)
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value),
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red"))+
facet_wrap(~variable, ncol = 1, scales = "free")+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red")))+
facet_wrap(~variable, ncol = 1, scales = "free")+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red")))+
scale_colour_manual(values = c("black",NULL))+
facet_wrap(~variable, ncol = 1, scales = "free")+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red")))+
scale_colour_manual(values = c("black",NA))+
facet_wrap(~variable, ncol = 1, scales = "free")+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red")))+
scale_colour_manual(values = c("black",NA))+
facet_wrap(~variable, ncol = 1, scales = "free")+
guides(colour = F)+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12))))+
scale_colour_manual(values = c("black",NA))+
facet_wrap(~variable, ncol = 1, scales = "free")+
guides(colour = F)+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), 1, 0)))+
scale_colour_manual(values = c("black",NA))+
facet_wrap(~variable, ncol = 1, scales = "free")+
guides(colour = F)+
theme_bw()
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red")))+
scale_colour_manual(values = c("black",NA))+
facet_wrap(~variable, ncol = 1, scales = "free")+
guides(colour = F)+
theme_bw()
install.packages("forecast")
?zooreg
zooreg(goose_ts)
#'load knitr
library(knitr)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/")
#'load libs
library(readxl)
library(RColorBrewer)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
#'all records in the netherlands or nrw after than 2000
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country == "NL"|lt_geese$Country=="NRW",]
study_site = study_site[study_site$Breeding_year >= 2001,]
#'fix missing days
study_site$Day = ifelse(is.na(study_site$Day),
15, study_site$Day)
#'use a time column of the posixct class
study_site$time = as.POSIXct(paste(study_site$Year,
study_site$Month,study_site$Day),
format="%Y %m %d")
#'fix flock size
study_site$Total_flock = ifelse(is.na(study_site$Total_flock),
ifelse(is.na(study_site$N_sampled),
study_site$N_Adult+study_site$N_Juvenile,
study_site$N_sampled),
study_site$Total_flock)
#'fix juvenile percentage
study_site$`Perc-JV` = ifelse(is.na(study_site$`Perc-JV`),
study_site$N_Juvenile*100/study_site$Total_flock,
study_site$`Perc-JV`)
#'check for NAs
apply(study_site, 2, function(x){sum(is.na(x))})
#export to csv
study_site = study_site[study_site$time < "2012-05-01",]
write.csv(study_site, "clean_goose_data.csv")
#'create limited data frame
goose_time = study_site[,c("Region","Breeding_year","Total_flock","Perc-JV","time")]
#'remove years above 2012
goose_time = goose_time[goose_time$time < "2012-05-01",]
summary(goose_time[is.na(goose_time$Region),])
#'complete cases for time
goose_time = goose_time[complete.cases(goose_time),]
#'where are the NAs?
apply(goose_time, 2, function(x){sum(is.na(x))})
library(ggplot2)
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
theme_bw()
#'create a df aggregated as means with time as the factor
goose_ts = aggregate(goose_time,
list(goose_time$time), mean)
head(goose_ts)
#'create the ts
goose_ts = zoo(goose_ts[,c(3:5)], order.by = goose_ts$time)
#'plot data averaged within day
plot(goose_ts[,c(2,3)])
library(lubridate)
ggplot(data = melt(fortify(goose_ts)[,c(1,3,4)], id.vars = "Index"))+
geom_line(aes(x = Index, y = value,
col = ifelse(month(Index)%in%c(1:3,10:12), "black",
"red")))+
scale_colour_manual(values = c("black",NA))+
facet_wrap(~variable, ncol = 1, scales = "free")+
guides(colour = F)+
theme_bw()
autoplot(goose_ts[,c(2,3)], geom = "path",
scales = "free_y")
goose_reg_ts = zooreg(goose_ts)
goose_regular = as.ts(goose_reg_ts)
plot(goose_regular)
plot(goose_regular[,1])
plot(goose_regular[,2])
plot(goose_regular)
plot(stl(goose_regular[,2])
plot(stl(goose_regular[,2]))
plot(stl(goose_regular[,2], s.window = "periodic"))
plot(stl(goose_regular[,2], s.window = 180))
goose_stl = stl(goose_regular)
View(goose_regular)
goose_stl = stl(goose_regular[,2])
goose_regular = as.xts(goose_reg_ts)
library(foreach)
library(forecast)
trend_flocks = ma(goose_regular)
trend_flocks = ma(goose_regular, order = 1, centre = T)
plot(goose_regular)
lines(trend_flocks, col = 2)
trend_flocks = ma([goose_regular[,2], order = 1, centre = T)
trend_flocks = ma(goose_regular[,2], order = 1, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
trend_flocks = ma(goose_regular[,2], order = 180, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
trend_flocks = ma(goose_regular[,2], order = 30, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
trend_flocks = ma(goose_regular[,2], order = 90, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
trend_flocks = ma(goose_regular[,2], order = 15, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
trend_flocks = ma(goose_regular[,2], order = 30, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(as.ts(trend_flocks))
trend_flocks = ma(goose_regular[,2], order = 180, centre = T)
plot(as.ts(trend_flocks))
plot(goose_regular[,2])
plot(as.ts(trend_flocks))
plot(stl(trend_flocks))
plot(as.ts(trend_flocks))
trend_flocks = ma(goose_regular[,2], order = 30, centre = T)
trend_flocks = ma(goose_regular[,2], order = 30, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(as.ts(trend_flocks))
trend_flocks = ma(goose_regular[,2], order = 1, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(as.ts(trend_flocks))
trend_flocks = ma(goose_regular[,2], order = 4, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(as.ts(trend_flocks))
trend_flocks = ma(goose_regular[,2], order = 30, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(as.ts(trend_flocks))
trend_flocks = ma(goose_regular[,2], order = 180, centre = T)
plot(goose_regular[,2])
lines(trend_flocks, col = 2)
plot(as.ts(trend_flocks))
flock_detrend = goose_regular[,2] - trend_flocks
plot(as.ts(flock_detrend))
trend_flocks = ma(goose_regular[,2], order = 30, centre = T)
plot(as.ts(trend_flocks))
flock_detrend = goose_regular[,2] - trend_flocks
plot(as.ts(flock_detrend))
trend_flocks = ma(goose_regular[,2], order = 4, centre = T)
plot(as.ts(trend_flocks))
flock_detrend = goose_regular[,2] - trend_flocks
plot(as.ts(flock_detrend))
decompose(goose_regular[,2])
decompose(goose_regular)
# Chunk 1
#'load knitr
library(knitr)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/")
# Chunk 2: load data
#'load libs
library(readxl)
library(RColorBrewer)
#'create color pal
goose_cols = colorRampPalette(brewer.pal(9, "YlOrRd"))
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
# Chunk 3: reduce data
#'all records in the netherlands or nrw after than 2000
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country == "NL"|lt_geese$Country=="NRW",]
study_site = study_site[study_site$Breeding_year > 2000,]
unique(study_site$Country)
#'then sum family data
study_site = cbind(study_site, fams = apply(study_site[,c(19:28)], 1, function(x){sum(x, na.rm = T)}))
#'fix missing days
study_site$Day = ifelse(is.na(study_site$Day),
15, study_site$Day)
#'use a time column of the posixct class
study_site$time = as.POSIXct(paste(study_site$Year,
study_site$Month,study_site$Day),
format="%Y %m %d")
#'fix flock size
study_site$Total_flock = ifelse(is.na(study_site$Total_flock),
ifelse(is.na(study_site$N_sampled),
study_site$N_Adult+study_site$N_Juvenile,
study_site$N_sampled),
study_site$Total_flock)
#'fix juvenile percentage
study_site$`Perc-JV` = ifelse(is.na(study_site$`Perc-JV`),
study_site$N_Juvenile*100/study_site$Total_flock,
study_site$`Perc-JV`)
study_site = study_site[!is.na(study_site$Month),]
#'plot histogram of whitefront proportion
library(ggplot2)
ggplot()+
geom_histogram(data = study_site[(study_site$Month %in%
c(1:3,10:12)),],
aes(x = N_sampled/Total_flock),
#fill = as.factor(Month)),
bins = 30)+
# scale_fill_brewer(palette = "RdGy")+
facet_wrap(~Month)+
xlim(0,1.02)+
labs(list(x = "Whitefront proportion in flocks",
fill = "Month", title="Whitefront proportion ~ winter months"))+
theme_bw()
#'use ggplot histograms
library(ggplot2)
ggplot()+
geom_histogram(data = study_site[(study_site$Month %in%
c(1:3,10:12)),],
aes(x = Total_flock, fill = as.factor(Month), binwidth = 200),
col = "grey40",lwd=0.1)+
scale_fill_brewer(palette = "Greys")+
facet_wrap(~Month)+
labs(list(x = "Month", fill ="Month",
title="Flock size ~ winter months"))+
xlim(0,5000)+
theme_bw()
#'plot
ggplot()+
geom_histogram(data = study_site[study_site$Month %in% c(1:3,10:12),],
aes(x = `Perc-JV`, na.rm = T,
fill = as.factor(Month)), col = "grey40",lwd=0.1)+
scale_fill_brewer(palette = "Greys")+
facet_wrap(~Month)+
labs(list(x = "Juvenile percentage", fill = "Month",
title="Juvenile percentage ~ winter months"))+
theme_bw()
#'convert three columns to posixct
#'first convert year month date to char
study_site$time = as.POSIXct(paste(study_site$Year, study_site$Month, study_site$Day), format="%Y %m %d")
#'melt data
goose_time = study_site[,c("Region","Breeding_year","Total_flock","Perc-JV","fams","time")]
goose_time = goose_time[goose_time$time < "2012-05-01",]
goose_time = goose_time[complete.cases(goose_time),]
library(plyr);library(reshape)
#goose_time = melt(goose_time, id.vars = c("Region","Breeding_year"))
library(lubridate)
library(ggplot2)
ggplot(data = goose_time,
aes(x=Region, y=time))+
geom_tile()+
theme_bw()
#'basic plots
ggplot()+
geom_point(data = goose_time,
aes(x = time, y = Total_flock), size = 0.5)+
facet_wrap(~Region ,scales = "fixed")+
#ylim(0,5000)+
theme_bw()
#'basic plots
ggplot()+
geom_point(data = goose_time[!goose_time$Region %in%
c("FL","IJ","NB","UT"),],
aes(x = time, y = Total_flock), size = 0.5)+
facet_wrap(~Region ,scales = "fixed")+
#ylim(0,5000)+
theme_bw()
