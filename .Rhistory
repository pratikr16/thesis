y = "Number of flocks"))+
facet_grid(Breeding_year~., margins = T, scales = "free_y")
ggplot()+
geom_histogram(data = fams, aes(x=fams), bins = 50)+
labs(list(title = "Families in flocks per zone per year",
x = "Number of families",
y = "Number of flocks"))+
facet_wrap(~Breeding_year, margins = T, scales = "free_y")
ggplot()+
geom_histogram(data = fams, aes(x=fams), bins = 50)+
labs(list(title = "Families in flocks per zone per year",
x = "Number of families",
y = "Number of flocks"))+
facet_wrap(~Breeding_year, scales = "free_y")
ggplot()+
geom_histogram(data = fams, aes(x=fams), bins = 50)+
labs(list(title = "Families in flocks per zone per year",
x = "Number of families",
y = "Number of flocks"))+
facet_wrap(~Breeding_year)
# Chunk 1
#'load knitr
library(knitr)
library(ggplot2)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/")
# Chunk 2: load data
#'load libs
library(readxl)
library(RColorBrewer)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
# Chunk 3: reduce_data
#'all records in the netherlands or nrw after than 2000
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country %in% c("NL","NRW"),]
study_site = study_site[study_site$Breeding_year %in% c(2001:2011),]
# Chunk 4: assign_time
#'fix missing days
study_site$Day = ifelse(is.na(study_site$Day),
15, study_site$Day)
#'use a time column of the posixct class
study_site$time = as.POSIXct(paste(study_site$Year,
study_site$Month,study_site$Day),
format="%Y %m %d")
#'fix flock size
study_site$Total_flock = ifelse(is.na(study_site$Total_flock),
ifelse(is.na(study_site$N_sampled),
study_site$N_Adult+study_site$juvs,
study_site$N_sampled),
study_site$Total_flock)
#'fix juvenile percentage
study_site$`Perc-JV` = ifelse(is.na(study_site$`Perc-JV`),
study_site$juvs*100/study_site$Total_flock,
study_site$`Perc-JV`)
#'check for NAs
apply(study_site, 2, function(x){sum(is.na(x))})
#remove dates over May 2012
study_site = study_site[study_site$time < "2012-05-01",]
#'rename
geese = study_site
#'assign zones
geese$zone = ifelse(geese$Region %in% c("DU","KLE","RG","WES","WG"),
"Rhinelands",
ifelse(geese$Region %in% c("LER","DR","GR"),
"East Frisia",
ifelse(geese$Region %in% c("FR","FL","NH"),
"IJsselmeer",
ifelse(geese$Region %in% c("ZL","ZH"),
"Southwest", "Other"))))
#'rename percjv
library(plyr)
geese = rename(geese, replace = c("Perc-JV" = "propjuv",
"juvs" = "juvs"))
#'keep relevant columns
geese = geese[,c(2,7,14:29,33,34)]
#'count number of families
geese$fams = apply(geese[,c(8:17)], 1, function(x){sum(x, na.rm = T)})
#'subset
fams = geese[geese$fams > 0,]
#'try to get a representation of the number of families of each size recorded per zone per year.
fam_count2 = ddply(fams[,c(1,8:17,20)], c("zone","Breeding_year"), numcolwise(sum, na.rm = T))
#'then melt
fam_count_melt = melt(fam_count2, id.vars = c("zone","Breeding_year"))
library(reshape)
fam_count_melt = melt(fam_count2, id.vars = c("zone","Breeding_year"))
#'a histogram of the number of families per flock per zone per year
ggplot()+
geom_histogram(data = fams, aes(x=fams), bins = 50)+
labs(list(title = "Families in flocks per zone per year",
x = "Number of families",
y = "Number of flocks"))+
facet_wrap(~Breeding_year)
with(fams, plot(fams~juvs))
geese = rename(geese, replace = c("Perc-JV" = "propjuv",
"juvs" = "juvs"))
geese = geese[,c(2,7,14:29,33,34)]
fams = geese[geese$fams > 0,]
with(fams, plot(fams~juvs))
geese = rename(geese, replace = c("Perc-JV" = "propjuv",
"N_Juvenile" = "juvs"))
fams = geese[geese$fams > 0,]
with(fams, plot(fams~juvs))
with(fams, plot(fams~log(juvs)))
with(fams, plot(log(fams)~log(juvs)))
?glm
abline(lm(log(fams)~log(juvs)+, fams), col=2)
abline(lm(log(fams)~log(juvs), fams), col=2)
juvs_fam_mod1 = glm(fams~juvs, fams)
juvs_fam_mod1 = glm(fams~juvs, data = fams, family = "gaussian")
summary(juvs_fam_mod1)
juvs_fam_mod1 = glm(fams~juvs, data = fams, family = poisson)
summary(juvs_fam_mod1)
plot(juvs_fam_mod1)
juvs_fam_mod1 = lm(log(fams)~log(juvs), data = fams)
juvs_fam_mod1 = lm(log(fams)~log(juvs), data = fams, na.action = na.omit)
log(0)
juvs_fam_mod1 = lm(log(fams)~log(juvs), data = fams[fams$juvs > 0,], na.action = na.omit)
summary(juvs_fam_mod1)
plot(juvs_fam_mod1)
with(fams, plot(log(fams)~log(juvs)))
with(fams, plot((fams)~log(juvs)))
with(fams, plot((fams),log(juvs)))
with(fams, plot((fams),(juvs)))
with(fams, plot(log(fams),(juvs)))
with(fams, plot(log(fams)~(juvs)))
with(fams, plot(log(fams)~(juvs), xlim=c(0,300)))
juvs_fam_mod1 = glm(fams~log(juvs),
data = fams[fams$juvs > 0,],
family = poisson(link = "log"),
na.action = na.omit)
summary(juvs_fam_mod1)
plot(juvs_fam_mod1)
juvs_fam_mod1 = glm(fams~juvs,
data = fams[fams$juvs > 0,],
family = poisson(link = "log"),
na.action = na.omit)
summary(juvs_fam_mod1)
plot(juvs_fam_mod1)
juvs_fam_mod1 = lm(log(fams)~log(juvs),
data = fams[fams$juvs > 0,])
summary(juvs_fam_mod1)
with(fams, plot(log(fams)~(juvs), xlim=c(0,300)))
with(fams, plot((fams)~exp((juvs)), xlim=c(0,300)))
with(fams, plot((fams)~exp((juvs))))
with(fams, plot(log(fams)~(juvs), xlim=c(0,300)))
nls(famsums ~ exp((a*juvs)/(b+juvs)),
start = list(a=6,b =50))
#'fams juvs scatter with fitted function
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)
x11
x11()
# Chunk 1
#'load knitr
library(knitr)
library(ggplot2)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/")
# Chunk 2: load data
#'load libs
library(readxl)
library(RColorBrewer)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
# Chunk 3: reduce_data
#'all records in the netherlands or nrw after than 2000
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country %in% c("NL","NRW"),]
study_site = study_site[study_site$Breeding_year %in% c(2001:2011),]
# Chunk 4: assign_time
#'fix missing days
study_site$Day = ifelse(is.na(study_site$Day),
15, study_site$Day)
#'use a time column of the posixct class
study_site$time = as.POSIXct(paste(study_site$Year,
study_site$Month,study_site$Day),
format="%Y %m %d")
#'fix flock size
study_site$Total_flock = ifelse(is.na(study_site$Total_flock),
ifelse(is.na(study_site$N_sampled),
study_site$N_Adult+study_site$juvs,
study_site$N_sampled),
study_site$Total_flock)
#'fix juvenile percentage
study_site$`Perc-JV` = ifelse(is.na(study_site$`Perc-JV`),
study_site$juvs*100/study_site$Total_flock,
study_site$`Perc-JV`)
#'check for NAs
apply(study_site, 2, function(x){sum(is.na(x))})
#remove dates over May 2012
study_site = study_site[study_site$time < "2012-05-01",]
#'rename
geese = study_site
# Chunk 5: assign_zones
#'assign zones
geese$zone = ifelse(geese$Region %in% c("DU","KLE","RG","WES","WG"),
"Rhinelands",
ifelse(geese$Region %in% c("LER","DR","GR"),
"East Frisia",
ifelse(geese$Region %in% c("FR","FL","NH"),
"IJsselmeer",
ifelse(geese$Region %in% c("ZL","ZH"),
"Southwest", "Other"))))
#'rename percjv
library(plyr)
geese = rename(geese, replace = c("Perc-JV" = "propjuv",
"N_Juvenile" = "juvs"))
#'keep relevant columns
geese = geese[,c(2,7,14:29,33,34)]
#'count number of families
geese$fams = apply(geese[,c(8:17)], 1, function(x){sum(x, na.rm = T)})
#'subset
fams = geese[geese$fams > 0,]
# Chunk 6: sum_fams_peryear_perzone
#'try to get a representation of the number of families of each size recorded per zone per year.
fam_count2 = ddply(fams[,c(1,8:17,20)], c("zone","Breeding_year"), numcolwise(sum, na.rm = T))
library(reshape)
#'then melt
fam_count_melt = melt(fam_count2, id.vars = c("zone","Breeding_year"))
# Chunk 7: plot_fams_per_year_perzone_persize
#'how many families of each size per zone per year
ggplot()+
geom_col(data = fam_count_melt,
aes(x = variable,
y = value,
fill = variable),col=1, lwd = 0.1)+
scale_fill_brewer()+
facet_grid(Breeding_year~zone, margins = T, scales = "free_y")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
labs(list(x = "Family size",y = "Count",
title = "Family size counts per zone per year"))
# Chunk 10: plot_logfams_v_juvs
#'raw data
fams_juvs_plot2 = ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))
#'log fams vs juvs
fams_juvs_plot1 = ggplot()+
geom_point(data = fams, aes(x = (juvs), y = (fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "Number of families",
title = "Number of families ~ number of juveniles"))+
xlim(0,300)+ylim(0,200)
#'fams vs log juvs
#'not happy with this since it implies that the number of families monotonically increases.
#'fams_juvs_plot4 = ggplot()+
geom_point(data = fams, aes(x = log(juvs), y = (fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "Number of families",
title = "Number of families ~ number of juveniles"))
#'log-log transformed data
fams_juvs_plot3 = ggplot()+
geom_point(data = fams, aes(x = log(juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "ln(Juveniles)",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles"))
#'load grid extra
library(gridExtra)
grid.arrange(fams_juvs_plot1, fams_juvs_plot2, fams_juvs_plot3, ncol = 2)
# Chunk 11: nls_log_data
#### log(fams) ~ juvs ####
#create log fam sums object an juvs
logfamsums = log(fams$fams)
juvs = fams$juvs
#'run an nls
fam_juvs_nls1 = nls(logfamsums ~ (a*juvs)/(b+juvs),
start = list(a = 6, b = 50))
#'summary
summary(fam_juvs_nls1)
#'check the correlation between predicted and real values
cor(logfamsums[!is.na(juvs)], predict(fam_juvs_nls1))
#get parameter estimate
fam_juvs_nls1$m$getPars()
#'fams juvs scatter with fitted function
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)
fam_juvs_nls1$m$getPars()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_smooth(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5, method = "lm", formula = y ~ (4.283*x)/(15.265+x))
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_smooth(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5, method = "lm", formula = log(fams) ~ (4.283*juvs)/(15.265+juvs))
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_smooth(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5, method = "lm", formula = log(fams) ~ 4.283*juvs/(15.265+juvs))
#'fams juvs scatter with fitted function
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, col = "grey")+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, col = "grey")+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, col = "grey", pch = 20)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, col = "grey", pch = 21)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, col = "grey40", pch = 21)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, col = "grey", pch = 21)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.6, col = "grey", pch = 21)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5)+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5, col = "grey")+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 1, col = "grey")+theme_minimal()
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5, pch = 21)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))+
geom_line(aes(x = na.omit(juvs), y = predict(fam_juvs_nls1)),
lwd = 0.5, col = 2)+theme_minimal()
geese$juvs[is.na(geese$juvs)] = 0
# Chunk 1
#'load knitr
library(knitr)
library(ggplot2)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/")
# Chunk 2: load data
#'load libs
library(readxl)
library(RColorBrewer)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
# Chunk 3: reduce_data
#'all records in the netherlands or nrw after than 2000
#'first keep only nl or nrw after 2000
study_site = lt_geese[lt_geese$Country %in% c("NL","NRW"),]
study_site = study_site[study_site$Breeding_year %in% c(2001:2011),]
# Chunk 4: assign_time
#'fix missing days
study_site$Day = ifelse(is.na(study_site$Day),
15, study_site$Day)
#'use a time column of the posixct class
study_site$time = as.POSIXct(paste(study_site$Year,
study_site$Month,study_site$Day),
format="%Y %m %d")
#'fix flock size
study_site$Total_flock = ifelse(is.na(study_site$Total_flock),
ifelse(is.na(study_site$N_sampled),
study_site$N_Adult+study_site$juvs,
study_site$N_sampled),
study_site$Total_flock)
#'fix juvenile percentage
study_site$`Perc-JV` = ifelse(is.na(study_site$`Perc-JV`),
study_site$juvs*100/study_site$Total_flock,
study_site$`Perc-JV`)
#'check for NAs
apply(study_site, 2, function(x){sum(is.na(x))})
#remove dates over May 2012
study_site = study_site[study_site$time < "2012-05-01",]
#'rename
geese = study_site
#'split the data by zone and by year
ggplot()+
geom_point(data = fams, aes(x = log(juvs), y = log(fams)),
size = 0.5)+
facet_grid(Breeding_year~zone)
#'split by year alone
ggplot()+
geom_point(data = fams, aes(x = log(juvs), y = log(fams)),
size = 0.5)+
facet_wrap(~Breeding_year)
#'split with only one log axis
ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
facet_grid(Breeding_year~zone)
#'raw data
fams_juvs_plot2 = ggplot()+
geom_point(data = fams, aes(x = (juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles, log transformation"))
#'log fams vs juvs
fams_juvs_plot1 = ggplot()+
geom_point(data = fams, aes(x = (juvs), y = (fams)),
size = 0.5)+
labs(list(x = "Juveniles",  y = "Number of families",
title = "Number of families ~ number of juveniles"))+
xlim(0,300)+ylim(0,200)
#'fams vs log juvs
#'not happy with this since it implies that the number of families monotonically increases.
#'log-log transformed data
fams_juvs_plot3 = ggplot()+
geom_point(data = fams, aes(x = log(juvs), y = log(fams)),
size = 0.5)+
labs(list(x = "ln(Juveniles)",  y = "ln(Number of families)",
title = "Number of families ~ number of juveniles"))
#'load grid extra
library(gridExtra)
grid.arrange(fams_juvs_plot1, fams_juvs_plot2, fams_juvs_plot3, ncol = 2)
logfamsums = log(fams$fams)
juvs = fams$juvs
fam_juvs_nls1 = nls(logfamsums ~ (a*juvs)/(b+juvs),
start = list(a = 6, b = 50))
summary(fam_juvs_nls1)
sum(is.na(juvs))
