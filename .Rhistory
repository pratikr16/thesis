labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
geom_hline(aes(yintercept = mean(geese$flocksize, na.rm = T)),
col = 2, lty = 3, size = 0.5)+ coord_flip()+ facet_wrap(~Breeding_year)+ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
geom_hline(aes(yintercept = median(geese$flocksize, na.rm = T)),
col = 2, lty = 3, size = 0.5)+ coord_flip()+ facet_wrap(~Breeding_year)+ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ddply(geese, "Breedin_year", summarise, medflock = median(flocksize, na.rm = T))
ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
geom_hline(aes(yintercept = median(fams.expand$flocksize, na.rm = T)),
col = 2, lty = 3, size = 0.5)+ coord_flip()+ facet_wrap(~Breeding_year)+ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
geom_hline(aes(yintercept = median(flocksize, na.rm = T)),
col = 2, lty = 3, size = 0.5)+ coord_flip()+ facet_wrap(~Breeding_year)+ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ddply(geese, "Breedin_year", summarise, medflock = median(flocksize, na.rm = T))
ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = median(flocksize, na.rm = T)),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = c(200,300,200,300))),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = c(200,300,200,300)),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = median(flocksize, na.rm = T)),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = median(flocksize, na.rm = T),
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(Breeding_year) %>%
mutate(med = median(flocksize, na.rm =T))
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(Breeding_year) %>%
mutate(med = median(flocksize))
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%
mutate(med = median(flocksize))
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%
mutate(med = median(fams.expand$flocksize))
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%
mutate(med = median(fams.expand$flocksize, na.rm = T))
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%
mutate(med = median(fams.expand$flocksize, na.rm = T))
#set all fams from NA to 0
fams[,c(9:18)][is.na(fams[,c(9:18)])] = 0
#'get expanded fams data, zone, time, etc
fams.expand <- fams[rep(row.names(fams), fams$fams),c(1:8,19:21)]
#'get the families as a list
famrep = apply(fams[,c(9:18)], 1, function(x){rep(c(1:10), x)})
#'unlist it for a fam sequence
famrep = unlist(famrep)
#'bind with famsexpand
fams.expand$famsize = as.numeric(famrep)
#'check by searching for fams of size 10
fams.expand[fams.expand$famsize == 10,]
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%
dplyr::mutate(med = median(fams.expand$flocksize, na.rm = T))
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
fams.expand$med
#set all fams from NA to 0
fams[,c(9:18)][is.na(fams[,c(9:18)])] = 0
#'get expanded fams data, zone, time, etc
fams.expand <- fams[rep(row.names(fams), fams$fams),c(1:8,19:21)]
#'get the families as a list
famrep = apply(fams[,c(9:18)], 1, function(x){rep(c(1:10), x)})
#'unlist it for a fam sequence
famrep = unlist(famrep)
#'bind with famsexpand
fams.expand$famsize = as.numeric(famrep)
#'check by searching for fams of size 10
fams.expand[fams.expand$famsize == 10,]
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%
dplyr::mutate(med = median(flocksize, na.rm = T))
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = median(flocksize, na.rm = T))
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = mean(flocksize, na.rm = T))
fams.expand$med
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2000)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = median(flocksize, na.rm = T))
head(fams.expand[fams.expand$Breeding_year == 2003,])
fams.expand[fams.expand$Breeding_year == 2003,]
View(fams.expand[fams.expand$Breeding_year == 2003,])
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
# Chunk 1
#'load knitr
library(knitr)
library(ggplot2)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/code")
# Chunk 2: import_data
#'load geese and fams
geese = read.csv("code/geese.csv")
fams = read.csv("code/fams.csv")
geese$time = as.POSIXct(geese$time)
geese = geese[complete.cases(geese$time),]
fams$time = as.Date(fams$time)
fams$fams = as.numeric(fams$fams)
#'remove outlier flock
geese = geese[-which(geese$juvs == max(geese$juvs,na.rm = T)),]
#'rename
library(plyr)
fams$X =NULL
geese$X = NULL
geese = rename(geese, replace = c("Total_flock" = "flocksize"))
fams = rename(fams, replace = c("Total_flock" = "flocksize"))
# Chunk 3: reconstruct_famsum
#'run lm
fam_juvs_lm1 = lm(log(fams) ~ log(juvs), data = fams[fams$juvs >0,])
#'predict new famsums from the full dataset
geese_famsum = exp(predict.lm(fam_juvs_lm1, newdata = geese))
#'assign the reconstructed number of families to each flock
geese$fams = ifelse(geese$fams <= 0,
geese_famsum, geese$fams)
# Chunk 4: plot_reconstruct
#'plot hists
par(mfrow =c(1,2))
hist(fams$fams, main = "Real data", xlab = "Total families",
xlim = c(0,200), breaks = 50, col = "grey90")
hist(geese$fams, main = "Reconstructed data", xlab = "Total families",
xlim = c(0,200), breaks = 50, col = "grey90")
par(mfrow = c(1,1))
# Chunk 6: expand_data
#set all fams from NA to 0
fams[,c(9:18)][is.na(fams[,c(9:18)])] = 0
#'get expanded fams data, zone, time, etc
fams.expand <- fams[rep(row.names(fams), fams$fams),c(1:8,19:21)]
#'get the families as a list
famrep = apply(fams[,c(9:18)], 1, function(x){rep(c(1:10), x)})
#'unlist it for a fam sequence
famrep = unlist(famrep)
#'bind with famsexpand
fams.expand$famsize = as.numeric(famrep)
#'check by searching for fams of size 10
fams.expand[fams.expand$famsize == 10,]
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = median(flocksize, na.rm = T))
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = median(Total_flock, na.rm = T))
# Chunk 1
#'load knitr
library(knitr)
library(ggplot2)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/code")
# Chunk 2: import_data
#'load geese and fams
geese = read.csv("code/geese.csv")
fams = read.csv("code/fams.csv")
geese$time = as.POSIXct(geese$time)
geese = geese[complete.cases(geese$time),]
fams$time = as.Date(fams$time)
fams$fams = as.numeric(fams$fams)
#'remove outlier flock
geese = geese[-which(geese$juvs == max(geese$juvs,na.rm = T)),]
#'rename
library(plyr)
fams$X =NULL
geese$X = NULL
geese = rename(geese, replace = c("Total_flock" = "flocksize"))
fams = rename(fams, replace = c("Total_flock" = "flocksize"))
# Chunk 3: reconstruct_famsum
#'run lm
fam_juvs_lm1 = lm(log(fams) ~ log(juvs), data = fams[fams$juvs >0,])
#'predict new famsums from the full dataset
geese_famsum = exp(predict.lm(fam_juvs_lm1, newdata = geese))
#'assign the reconstructed number of families to each flock
geese$fams = ifelse(geese$fams <= 0,
geese_famsum, geese$fams)
# Chunk 4: plot_reconstruct
#'plot hists
par(mfrow =c(1,2))
hist(fams$fams, main = "Real data", xlab = "Total families",
xlim = c(0,200), breaks = 50, col = "grey90")
hist(geese$fams, main = "Reconstructed data", xlab = "Total families",
xlim = c(0,200), breaks = 50, col = "grey90")
par(mfrow = c(1,1))
# Chunk 6: expand_data
#set all fams from NA to 0
fams[,c(9:18)][is.na(fams[,c(9:18)])] = 0
#'get expanded fams data, zone, time, etc
fams.expand <- fams[rep(row.names(fams), fams$fams),c(1:8,19:21)]
#'get the families as a list
famrep = apply(fams[,c(9:18)], 1, function(x){rep(c(1:10), x)})
#'unlist it for a fam sequence
famrep = unlist(famrep)
#'bind with famsexpand
fams.expand$famsize = as.numeric(famrep)
#'check by searching for fams of size 10
fams.expand[fams.expand$famsize == 10,]
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = median(Total_flock, na.rm = T))
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = median(Total_flock, na.rm = T))
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = mean(Total_flock, na.rm = T))
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
#set all fams from NA to 0
fams[,c(9:18)][is.na(fams[,c(9:18)])] = 0
#'get expanded fams data, zone, time, etc
fams.expand <- fams[rep(row.names(fams), fams$fams),c(1:8,19:21)]
#'get the families as a list
famrep = apply(fams[,c(9:18)], 1, function(x){rep(c(1:10), x)})
#'unlist it for a fam sequence
famrep = unlist(famrep)
#'bind with famsexpand
fams.expand$famsize = as.numeric(famrep)
#'check by searching for fams of size 10
fams.expand[fams.expand$famsize == 10,]
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = quantile(Total_flock, na.rm = T)[3])
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
ylim(0,2500)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year)+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year, scales = "free_y")+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year, scales = "free_x")+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = quantile(Total_flock, na.rm = T)[3])
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=Total_flock, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year, scales = "free_x")+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
# Chunk 1
#'load knitr
library(knitr)
library(ggplot2)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
opts_knit$set(root.dir = "~/git/thesis/code")
# Chunk 2: import_data
#'load geese and fams
geese = read.csv("geese.csv")
fams = read.csv("fams.csv")
geese$time = as.POSIXct(geese$time)
geese = geese[complete.cases(geese$time),]
fams$time = as.Date(fams$time)
fams$fams = as.numeric(fams$fams)
#'remove outlier flock
geese = geese[-which(geese$juvs == max(geese$juvs,na.rm = T)),]
#'rename
library(plyr)
fams$X =NULL
geese$X = NULL
geese = rename(geese, replace = c("Total_flock" = "flocksize"))
fams = rename(fams, replace = c("Total_flock" = "flocksize"))
# Chunk 3: reconstruct_famsum
#'run lm
fam_juvs_lm1 = lm(log(fams) ~ log(juvs), data = fams[fams$juvs >0,])
#'predict new famsums from the full dataset
geese_famsum = exp(predict.lm(fam_juvs_lm1, newdata = geese))
#'assign the reconstructed number of families to each flock
geese$fams = ifelse(geese$fams <= 0,
geese_famsum, geese$fams)
# Chunk 4: plot_reconstruct
#'plot hists
par(mfrow =c(1,2))
hist(fams$fams, main = "Real data", xlab = "Total families",
xlim = c(0,200), breaks = 50, col = "grey90")
hist(geese$fams, main = "Reconstructed data", xlab = "Total families",
xlim = c(0,200), breaks = 50, col = "grey90")
par(mfrow = c(1,1))
# Chunk 6: expand_data
#set all fams from NA to 0
fams[,c(9:18)][is.na(fams[,c(9:18)])] = 0
#'get expanded fams data, zone, time, etc
fams.expand <- fams[rep(row.names(fams), fams$fams),c(1:8,19:21)]
#'get the families as a list
famrep = apply(fams[,c(9:18)], 1, function(x){rep(c(1:10), x)})
#'unlist it for a fam sequence
famrep = unlist(famrep)
#'bind with famsexpand
fams.expand$famsize = as.numeric(famrep)
#'check by searching for fams of size 10
fams.expand[fams.expand$famsize == 10,]
# Chunk 7: famsize~flocksize
#median flocksizes
medflocks = ddply(geese, "Breeding_year", summarise, medflock = median(flocksize, na.rm = T))
#'plot
library(dplyr) # With dplyr for example
fams.expand <- fams.expand %>% group_by(as.factor(Breeding_year)) %>%   dplyr::mutate(med = quantile(flocksize, na.rm = T)[3])
library(plot3D)
ggplot(data = fams.expand[fams.expand$Breeding_year %in% c(2003, 2005, 2008, 2011) & fams.expand$famsize <7,])+
geom_violin(aes(y=flocksize, x = as.factor(famsize)),
size = 0.4, draw_quantiles = 0.5)+
coord_flip()+
facet_wrap(~Breeding_year, scales = "free_x")+
geom_hline(aes(yintercept = med,
group = "Breeding_year"),
col = 2, lty = 3, size = 0.5)+
labs(list(x = "Family size", y = "Flock size"))+theme_minimal()
# Chunk 8: log_transform_fam_flock
ggplot(data = fams.expand)+
geom_jitter(aes(x=log(flocksize), y = (famsize),
col = Mean_Fam),
size = 0.5, pch = 20)+
scale_color_gradientn(colours = jet.col(20))+
labs(list(x = "Flock size", y = "Family size"))+
facet_wrap(~zone)
# Chunk 9: famsize_meanfam
ggplot(data = fams.expand)+
geom_jitter(aes(x= log2(Mean_Fam), y = famsize,
col = propjuv),
size = 0.5, pch = 20)+
scale_color_gradientn(colours = jet.col(20))+
labs(list(x = "Mean family size", y = "Family size"))
# Chunk 11: get_coords
#'load data
sites = read.csv("family_places.csv")[,c(2:4)]
#merge with data
fams.expand = merge(fams.expand, sites, by.x = "Site_name",by.y="places")
#'clean data
fams.expand2 = fams.expand[fams.expand$lat >49 &
fams.expand$lon > 0 &
fams.expand$lon <=10,]
fams.expand2 = fams.expand2[complete.cases(fams.expand2$famsize),]
# Chunk 12: famsize_long
#'familysize ~longitude
#'load provinces
provinces = read.csv("province_coords.csv")
ggplot()+
geom_violin(data=fams.expand2[fams.expand2$famsize <7,], aes(x = as.factor(famsize), y = lon, fill = as.factor(famsize)), alpha = 0.5, draw_quantiles = 0.5)+
geom_hline(yintercept = c(provinces[provinces$V2 %in% c("LER","DU","RG"),]$lon), col = 2, size = 0.5, lty =3)+
geom_text(inherit.aes = F, aes(y = c(provinces[provinces$V2 %in% c("LER","DU","RG"),]$lon), x = c(6.5,5.5,5.5), label = c("Duisburg","Leer","Netherlands")))+
coord_flip()+
labs(list(y = "Longitude",x="Family size"))+theme_minimal()
