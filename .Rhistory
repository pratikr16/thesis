library(readxl)
lt_geese = read_excel("Age-ratiodata-GWfG-toPratik.xlsx")
lt_geese = read_excel("Age-ratiodata-GWfG-toPratik.xlsx", 2)
library(readxl)
Age_ratiodata_GWfG_toPratik <- read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table")
View(Age_ratiodata_GWfG_toPratik)
rm(Age_ratiodata_GWfG_toPratik)
summary(lt_geese)
which(colnames(lt_geese)=="Year")
View(lt_geese)
col_geese = colnames(lt_geese)
which(col_geese=="Breeding_year"|
col_geese=="Country"|
col_geese=="Region"|
col_geese=="Total_flock"|
col_geese=="N_Adult"|
col_geese=="N_Juvenile"|
col_geese=="N_sampled")
geese_fac = which(col_geese=="Breeding_year"|
col_geese=="Country"|
col_geese=="Region")
geese_cont = which(col_geese=="Total_flock"|
col_geese=="N_Adult"|
col_geese=="N_Juvenile"|
col_geese=="N_sampled")
geese_fam = which(col_geese == grepl("Fam", names(lt_geese)))
grepl("Fam", names(lt_geese))
geese_fam = lt_geese[,grepl("Fam", names(lt_geese))]
summary(lt_geese[,geese_fac])
library(knitr)
?opts_chunk
library(knitr)
length(unique(lt_geese$Breeding_year))
unique(lt_geese$Breeding_year)
#'load knitr
library(knitr)
#'suppress all code output but run code
opts_chunk$set(echo = FALSE)
tufte::tufte_handout()
#'load libs
library(readxl)
#'import data
lt_geese = read_excel("Age-ratiodata-GWfG-toPratik.xlsx", 2)
#'save colnames
col_geese = colnames(lt_geese)
#'all season and geographic variable column indices
geese_fac = which(col_geese=="Breeding_year"|
col_geese=="Month"|
col_geese=="Country"|
col_geese=="Region")
#'all numerical variable column indices except family size
geese_cont = which(col_geese=="Total_flock"|
col_geese=="N_Adult"|
col_geese=="N_Juvenile"|
col_geese=="N_sampled"|
col_geese=="Perc-JV")
#'all family size indices
geese_fam = lt_geese[,grepl("Fam", names(lt_geese))]
#'geographic data
summary(lt_geese[,geese_fac])
#'unique years
length(unique(lt_geese$Breeding_year))
#'which years
unique(lt_geese$Breeding_year)
#'how many records per year?
table(lt_geese[,c("Breeding_year")])
goose_year_month = data.frame(table(lt_geese[lt_geese$Breeding_year>=2001,][,c("Breeding_year","Month")]))
library(reshape2)
goose_year_month = melt(goose_year_month)
#'load plotting libs
library(ggplot2)
library(RColorBrewer)
#'create color pal
goose_cols = colorRampPalette(brewer.pal(9, "YlOrRd"))
#'plot hm
ggplot(data = as.data.frame(goose_year_month),
aes(x=Breeding_year, y=Month, fill=value)) +
geom_tile()+
scale_fill_gradientn(colours = goose_cols(20))+
labs(list(fill = "Records"))+
theme_minimal()
#'set country as a factor
lt_geese$Country = as.factor(lt_geese$Country)
#'run a summary
summary(lt_geese$Country)
#'how many countries
length(unique(lt_geese$Country))
#'create df
goose_country_year = data.frame(table(lt_geese[lt_geese$Breeding_year>=2001,][,c("Country","Breeding_year")]))
#'melt it
goose_country_year = melt(goose_country_year)
#'heatmap it
ggplot(data = as.data.frame(goose_country_year),
aes(x=Country, y=Breeding_year, fill=value)) +
geom_tile()+
scale_fill_gradientn(colours = goose_cols(20))+
labs(list(fill = "Records"))+
theme_minimal()
length(unique(lt_geese$Site_name))
length(unique(lt_geese[lt_geese$Country == "NL" | lt_geese$Country == "NRW",]$Region))
length(unique(lt_geese[lt_geese$Country == "NL"
| lt_geese$Country == "NRW",]$Region))
geese_nl = lt_geese[lt_geese$Country == "NL"
| lt_geese$Country == "NRW",]
length(unique(geese_nl$Region))
length(unique(geese_nl$Site_name))
length(lt_geese[lt_geese$Sample_no>1,])
length(lt_geese[lt_geese$Sample_type == "T",])
length(lt_geese[lt_geese$Sample_type == "S",])
summary(lt_geese$Sample_no)
summary(lt_geese$Sample_type)
summary(as.factor(lt_geese$Sample_type))
lt_geese[lt_geese$Sample_no>1,]
dim(lt_geese[lt_geese$Sample_no > 1,])
length(lt_geese[lt_geese$Sample_no > 1,]$Sample_no)
hist(lt_geese$Sample_no)
length(unique(lt_geese[lt_geese$Sample_no > 1,]$Sample_no))
unique(lt_geese[lt_geese$Sample_no > 1,]$Sample_no)
length(lt_geese[lt_geese$Sample_no > 1,]$Sample_no)
unique(lt_geese[lt_geese$Sample_no > 1,]$Sample_no)
sum(!is.na(lt_geese$Sample_no))
sum(is.na(lt_geese$Sample_no))
length(lt_geese[lt_geese$Sample_type == "S",]$Sample_type)
length(lt_geese[lt_geese$Sample_type == "T",]$Sample_type)
save.image("~/git/thesis/goose001.RData")
fam_rowsum = apply(geese_fam[,c(1:10)], 1, function(x){sum(x, na.rm = T)})
length(lt_geese$N_Juvenile > 0, na.rm = T)
length(lt_geese$N_Juvenile > 0)
length(lt_geese$N_Juvenile > 0, na.action = na.omit)
length(lt_geese[!is.na(lt_geese$N_Juvenile),]$N_Juvenile> 0)
length(lt_geese[!is.na(lt_geese$N_Juvenile),])
sum(lt_geese[!is.na(lt_geese$N_Juvenile),])
dim(lt_geese[!is.na(lt_geese$N_Juvenile),])
dim(lt_geese[!is.na(lt_geese$N_Juvenile),])[1]
#'get the total number of families recorded
fam_counts = matrix(apply(geese_fam[,c(1:10)], 2, function(x){sum(!is.na(x))}),
ncol = 10)
#'assign colnames
colnames(fam_counts) = colnames(geese_fam[,c(1:10)])
#'print the table
kable(fam_counts, caption = "Numbers of families of each size.")
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable == "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(palette = "Spectral")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
#'melt and run a histogram/density
geese_flock = melt(geese_flock[,c(1:4)])
#'make a table
goose_flock_table = t(rbind(apply(!is.na(geese_flock),2, sum),
apply(geese_flock, 2, function(x){quantile(x, na.rm = T)[2]}),
apply(geese_flock, 2, function(x){median(x, na.rm = T)}),
apply(geese_flock, 2, function(x){round(max(x, na.rm = T))})))
#'set df
geese_flock = lt_geese[,geese_cont]
#'summary on geese cont
summary(geese_flock)
#'number of flocks
sum(!is.na(geese_flock$Total_flock))
#'make a table
goose_flock_table = t(rbind(apply(!is.na(geese_flock),2, sum),
apply(geese_flock, 2, function(x){quantile(x, na.rm = T)[2]}),
apply(geese_flock, 2, function(x){median(x, na.rm = T)}),
apply(geese_flock, 2, function(x){round(max(x, na.rm = T))})))
colnames(goose_flock_table) = c("Records",
"Qrt1", "Median", "Maximum")
rownames(goose_flock_table) = c("Flock size","Adults",
"Juveniles", "Total Whitefronts", "% Juvs")
#'print table using the funciton kable
kable(round(goose_flock_table), caption = "Flock size table.")
#'melt and run a histogram/density
geese_flock = melt(geese_flock[,c(1:4)])
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable == "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(palette = "Spectral")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable == "Perc-JV",], aes(x = value, fill = variable))+
scale_fill_brewer(palette = "Spectral")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable == "Perc-JV",], aes(x = value, fill = variable))+
scale_fill_brewer(palette = "Spectral")+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable == "Perc-JV",], aes(x = value))+
scale_fill_brewer(palette = "Spectral")+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = Perc-JV))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(palette = "Spectral")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = Perc-JV))+
scale_fill_brewer(palette = "Spectral")+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = "Perc-JV"))+
scale_fill_brewer(palette = "Spectral")+
theme_minimal()
library(plyr)
lt_geese = rename(lt_geese, replace = c("Perc-JV"=="prop_juv"))
lt_geese = rename(lt_geese, replace = c("Perc-JV"="prop_juv"))
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv))+
scale_fill_brewer(palette = "Spectral")+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(palette = "Spectral")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(palette = "Spectral")+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv))+
scale_fill_brewer(palette = "Spectral")+
geom_abline(xintercept = median(lt_geese$prop_juv, na.rm = T))+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv))+
scale_fill_brewer(palette = "Spectral")+
geom_vline(xintercept = median(lt_geese$prop_juv, na.rm = T))+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv))+
scale_fill_brewer(palette = "Spectral")+
geom_vline(xintercept = median(lt_geese$prop_juv, na.rm = T), col = 2)+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv))+
scale_fill_brewer(palette = "Spectral")+
geom_vline(xintercept = median(lt_geese$prop_juv, na.rm = T), fill = "grey80")+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv), fill = "grey90")+
geom_vline(xintercept = median(lt_geese$prop_juv, na.rm = T))+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv), fill = "grey70")+
geom_vline(xintercept = median(lt_geese$prop_juv, na.rm = T))+
theme_minimal()
#'rename Perc-JV
library(plyr)
lt_geese = rename(lt_geese, replace = c("Perc-JV"="prop_juv"))
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv/100), fill = "grey70")+
geom_vline(xintercept = median(lt_geese$prop_juv, na.rm = T))+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv/100), fill = "grey70")+
geom_vline(xintercept = median(lt_geese$prop_juv/100, na.rm = T))+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv/100), fill = "grey70")+
geom_vline(xintercept = median(lt_geese$prop_juv/100, na.rm = T))+
labs(list(x="Juvenile proportion"))+
theme_minimal()
median(lt_geese$prop_juv/100, na.rm = T)
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv/100), fill = "tan1")+
geom_vline(xintercept = median(lt_geese$prop_juv/100, na.rm = T))+
labs(list(x="Juvenile proportion"))+
theme_minimal()
median(lt_geese$prop_juv, na.rm = T)
median(lt_geese$prop_juv, na.rm = T)/100
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(palette = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_brewer(colours = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_gradientn(colours = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_manual(colours = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(3))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable, col = 1, size = 0.1))+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable), col = 1, size = 0.1)+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable), col = 1, size = 0.01)+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable), col = 1, size = 0.05)+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
#'rename Perc-JV
library(plyr)
#'rename perc-jv to prop_juv
lt_geese = rename(lt_geese, replace = c("Perc-JV"="prop_juv"))
#'median juvenile proportion
median(lt_geese$prop_juv, na.rm = T)/100
#'plot juvenile proportion distribution with vline at median
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv/100), fill = "tan1")+
geom_vline(xintercept = median(lt_geese$prop_juv/100, na.rm = T))+
labs(list(x="Juvenile proportion"))+
theme_minimal()
ggplot()+
geom_histogram(data = lt_geese, aes(x = prop_juv/100), fill = "tan1",
col =1, size=0.05)+
geom_vline(xintercept = median(lt_geese$prop_juv/100, na.rm = T))+
labs(list(x="Juvenile proportion"))+
theme_minimal()
length(lt_geese$prop_juv>100)
dim(lt_geese$prop_juv>100)
sum(which(lt_geese$prop_juv>100))
length(which(lt_geese$prop_juv>100))
which(lt_geese$prop_juv>100)
ggplot()+
geom_histogram(data = lt_geese[which(lt_geese$prop_juv<100),], aes(x = prop_juv/100), fill = "tan1",
col=1, size = 0.05)+
geom_vline(xintercept = median(lt_geese$prop_juv/100, na.rm = T))+
labs(list(x="Juvenile proportion"))+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable), col = c(1,0,0,0), size = 0.05)+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
ggplot()+
geom_histogram(data = geese_flock[geese_flock$variable != "Perc-JV",], aes(x = value, fill = variable))+
facet_grid(~variable, scales = "free")+
scale_fill_manual(values = goose_cols(4))+
guides(fill="none")+
xlim(0,3000)+ylim(0,2000)+
theme_minimal()
dim(lt_geese[!is.na(lt_geese$N_Juvenile),]>0)[1]
length(lt_geese[!is.na(lt_geese$N_Juvenile),]$N_juvenile > 0)
length(lt_geese$N_Juvenile, na.rm =T)
dim(lt_geese[!is.na(lt_geese$N_Juvenile),] > 0)[1]
dim(lt_geese[!is.na(lt_geese$N_Juvenile > 0),])[1]
sum(!is.na(lt_geese$Food_type))
sum(is.na(lt_geese$Food_type))
summarise(lt_geese$Food_type)
View(lt_geese)
library(readxl)
Age_ratiodata_GWfG_toPratik <- read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "string", "string",
"string"))
View(Age_ratiodata_GWfG_toPratik)
as.string
??string
#'load libs
library(readxl)
#'import data
lt_geese = read_excel("~/git/thesis/Age-ratiodata-GWfG-toPratik.xlsx",
sheet = "Plain_table", col_types = c("text",
"numeric", "numeric", "numeric",
"numeric", "text", "text", "text",
"text", "numeric", "text", "text",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "text", "text",
"text"))
#'summary of food
summarise(lt_geese$Food_type)
summary(lt_geese$Food_type)
summary(as.factor(lt_geese$Food_type))
sum(is.na(lt_geese$Food_type))
sum(is.na(lt_geese$Food_type))
length(unique(lt_geese$Food_type))
length(unique(lt_geese$Observer))
